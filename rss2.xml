<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>木木屋</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>再进步一点</description>
    <pubDate>Sat, 09 Sep 2023 02:05:11 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>羊城杯部分misc</title>
      <link>http://example.com/2023/09/09/%E7%BE%8A%E5%9F%8E%E6%9D%AF%E9%83%A8%E5%88%86misc/</link>
      <guid>http://example.com/2023/09/09/%E7%BE%8A%E5%9F%8E%E6%9D%AF%E9%83%A8%E5%88%86misc/</guid>
      <pubDate>Sat, 09 Sep 2023 02:01:24 GMT</pubDate>
      
        
        
      <description>&lt;h1&gt;&lt;span id=&quot;ez_misc&quot;&gt;EZ_misc&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906151602170.png&quot; alt=</description>
        
      
      
      
      <content:encoded><![CDATA[<h1><span id="ez_misc">EZ_misc</span></h1><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906151602170.png" alt="image-20230906151602170"></p><p>看到图片下面好像还有一部分，用脚本计算长宽复原一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">crcbp = <span class="built_in">open</span>(<span class="string">&quot;1.png&quot;</span>, <span class="string">&quot;rb&quot;</span>).read()    <span class="comment">#打开图片</span></span><br><span class="line">crc32frombp = <span class="built_in">int</span>(crcbp[<span class="number">29</span>:<span class="number">33</span>].<span class="built_in">hex</span>(),<span class="number">16</span>)     <span class="comment">#读取图片中的CRC校验值</span></span><br><span class="line"><span class="built_in">print</span>(crc32frombp)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):                        <span class="comment">#宽度1-4000进行枚举</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4000</span>):                    <span class="comment">#高度1-4000进行枚举</span></span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="comment">#print(crc32)</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == crc32frombp):            <span class="comment">#计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span></span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hex:&#x27;</span>, <span class="built_in">hex</span>(i), <span class="built_in">hex</span>(j))</span><br><span class="line">            exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906151815556.png" alt="image-20230906151815556"></p><p>用010改一下长宽</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906151857665.png" alt="image-20230906151857665"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906151911421.png" alt="image-20230906151911421"></p><p>没什么有用的信息</p><p>刚刚010打开的时候有提示图片有问题，搜索png的图片尾 AE 42 60 82</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906152028960.png" alt="image-20230906152028960"></p><p>可以看到后面还有一个pk包，包前有一串英文fivenumbers提示五位数字，但是压缩包分离出来发现并没有加密，所以应该是其他的密码</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906152156058.png" alt="image-20230906152156058"></p><p>分离后直接打开会提示损坏，回去看看发现头有点问题，zip头应该是50 4B 03 04，这里是04 03修改一下</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906152301488.png" alt="image-20230906152301488"></p><p>打开是这个东西vzbtrvplnnvphsqkxsiqibroou，试了很多种编码方式都弄不出来，好久才发现题目名字是提示，图片名和txt名连起来是gronsfeld。</p><p>Gronsfeld是维吉尼亚密码的变种，区别在于前者的key是数字，后者的key是字母。</p><p>那么fivenumbers应该就是说key是五位数字，直接网站爆破一下<a href="https://www.dcode.fr/gronsfeld-cipher">Gronsfeld Cipher - Online Decoder, Encoder, Translator (dcode.fr)</a></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906152630708.png" alt="image-20230906152630708"></p><p>重点看五位数字的，可以找到这样一句话</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906152711101.png" alt="image-20230906152711101"></p><p>trytothinkthesnippingtools  试着想想截图工具</p><p>这里联系到一个截图的cve，该漏洞(CVE-2023-28303)被称为aCropalypse，可以使恶意行为者恢复屏幕截图的部分内容，可能会泄露敏感信息，漏洞产生是因为用win自带的截图对截图进行裁剪时，文件大小，数据不会被消除</p><p>搜一下脚本恢复一下</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906153305594.png" alt="image-20230906153305594"></p><p>这边由于我的环境问题用不了脚本，最后脚本可以直接出原图</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907111441101.png" alt="image-20230907111441101"></p><p>总结：题目信息提示，截图cve</p><h1><span id="程序猿quby">程序猿Quby</span></h1><p>根据题目给出的信息《死亡之链》这本书，搜索一下发现里面有个加密叫做夏多加密，根据时钟和已经有的密码表来进行加密，如下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hLjMzaXEuY29tL3VwbG9hZC8xNy8wMy8yNi9fdGh1bWJzL2JpZy8xNDkwNTE0NjQyMTk5NS5qcGchMzMuanBn?x-oss-process=image/format,png" alt="unuseless"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230906174349310.png" alt="image-20230906174349310"></p><p>对应题目的图，我们可以只看时针和分针，所以后面的秒可以省略，我们先找圈圈1，只有6:00，对应时钟那就是代表着3，1234表示纸张的朝向，1表示向上，2表示纸张往右转，3表示纸张往下，4表示纸张往右，这里3就表示待会要翻转180°，然后找找圈圈2，这里有3:00和9:00，3点和9点的时针可以拼出来H，180翻转没有影响，然后看圈圈3，这里有4点和7点对照时钟的位置然后翻转一下，可以对应到A，以此类推圈圈4就是V，最后得到HAVEANICEDAY</p><p>把图片拉到010分析发现后面还有一个压缩包，分离一下得到一个加密的rar，但是刚刚这个解出来的字符串不是压缩包的密码，那可能就是图片的密码，带密码的隐写有outguess，silenteye，cloak，steghide等，这里用cloak可以得到密码</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907103145594.png" alt="image-20230907103145594"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907103226857.png" alt="image-20230907103226857"></p><p>用we1c0met0ycbCTF!!!去解压压缩包可以得到一些xlsx和一个wav</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907103438244.png" alt="image-20230907103438244"></p><p>分析一下，两个xlsx和一个wav，wav的名字应该是你有key吗，那应该要去两个帐单里面分析出key来解wav里面的东西</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907103654948.png" alt="image-20230907103654948"></p><p>打开分析不出什么东西，往下拉发现有折叠起来的东西</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907103727457.png" alt="image-20230907103727457"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907103820421.png" alt="image-20230907103820421"></p><p>展开之后还是空白，可能隐藏了东西，给加上底色</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907103850574.png" alt="image-20230907103850574"></p><p>都是3.33和6.66，考虑二进制，换成01，账单二也是同样的操作</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907103952748.png" alt="image-20230907103952748"></p><p>加上突出显示，把01区分开，会发现有类似字母的东西但是好像显示不完整，考虑把两个表拼在一起</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907110131804.png" alt="image-20230907110131804"></p><p>比如上面是个job，最后得到一句话w0wyoudo4goodj0b（眼睛最痛的一集）</p><p>用deepsound打开wav文件</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907110337237.png" alt="image-20230907110337237"></p><p>密码填刚刚的那句话</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907110403166.png" alt="image-20230907110403166"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907110514583.png" alt="image-20230907110514583"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907110520982.png" alt="image-20230907110520982"></p><p>得到这两个东西，第一个cyberchef解一下，得到一个字符串，长度是64和第二个联系，可能是base64表</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907111008029.png" alt="image-20230907111008029"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907111135464.png" alt="image-20230907111135464"></p><p>DASCTF{Qu6y_d0_not_lik3_w0rking_4t_all}</p><p>总结一下，夏多密码，重复的两种元素考虑二进制或者差分区别开，64长度考虑base64表</p><h1><span id="gifuck">GIFuck</span></h1><p>学习到了一个新工具puzzlesolver</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907162952639.png" alt="image-20230907162952639"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907162921903.png" alt="image-20230907162921903"></p><p>拆分之后可以根据哈希打印字符，可以用chatgpt写个脚本（下面的是网上扒的gpt写的脚本）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">current_directory = os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(current_directory):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1100</span>):</span><br><span class="line">        file_name = <span class="built_in">str</span>(i)+<span class="string">&quot;.png&quot;</span></span><br><span class="line">        file_path = os.path.join(root, file_name)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                md5_hash = hashlib.md5()</span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    data = file.read(<span class="number">4096</span>)  <span class="comment"># 每次读取4KB</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    md5_hash.update(data)</span><br><span class="line">                <span class="keyword">if</span> md5_hash.hexdigest() == <span class="string">&quot;39ce3969db6953bf4c59b8b36ead8c42&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;+&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> md5_hash.hexdigest() == <span class="string">&quot;9a328dc0aebd6bf7070accebd78304b2&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;[&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> md5_hash.hexdigest() == <span class="string">&quot;d88c67ff7359394704665c2ab78a554b&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> md5_hash.hexdigest() == <span class="string">&quot;1ce562208f7572542048c1203707d4eb&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;&gt;&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> md5_hash.hexdigest() == <span class="string">&quot;ea918e7ad1b7f728f3942bd058346bc1&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;&lt;&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">elif</span> md5_hash.hexdigest() == <span class="string">&quot;eb5e7fb2de660e20053bd0289603cec7&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;]&quot;</span>,end=<span class="string">&#x27;&#x27;</span>) </span><br><span class="line">                <span class="keyword">elif</span> md5_hash.hexdigest() == <span class="string">&quot;a640687ab44a80e1d9b0c5b64c5a89c3&quot;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;File: <span class="subst">&#123;file_path&#125;</span> MD5: <span class="subst">&#123;md5_hash.hexdigest()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907164943351.png" alt="image-20230907164943351"></p><p>得到+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;-[-&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&lt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;][-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;][-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;][-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;+&lt;]&gt;+.+.+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;+&lt;]&gt;+.-.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;-&lt;]&gt;-.+.-.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.+.&lt;+[-&gt;-&lt;]&gt;-.+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.+.+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.-.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;-&lt;]&gt;-.[-]&lt;</p><p>拿去brainfuck解密<a href="http://pablojorge.github.io/brainfuck/">pablojorge.github.io&#x2F;brainfuck&#x2F;</a></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907183713717.png" alt="image-20230907183713717"></p><p>没解出来，可能是打印的不对，学习到了一个叫做拆帧的方法，就是根据图片的帧间隔来隐藏一些信息</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907183757655.png" alt="image-20230907183757655"></p><p>这里发现都是60的倍数，可以根据倍数来决定打印多少次，用脚本来执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">times = [<span class="string">&#x27;240&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;240&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;360&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>, <span class="string">&#x27;60&#x27;</span>,（后面照着copy）]</span><br><span class="line">strings = <span class="string">&quot;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;-[-&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&lt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;][-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;][-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;][-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]+&lt;+&lt;+[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;+&gt;]&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;+&lt;]&gt;+.+.+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;+&lt;]&gt;+.-.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;-&lt;]&gt;-.+.-.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.+.&lt;+[-&gt;-&lt;]&gt;-.+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.+.+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;+&lt;]&gt;+.-.&lt;+[-&gt;+&lt;]&gt;+.&lt;+[-&gt;-&lt;]&gt;-.&lt;+[-&gt;-&lt;]&gt;-.[-]&lt;&quot;</span></span><br><span class="line"></span><br><span class="line">out = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(times)):</span><br><span class="line">    out += strings[i] * ((<span class="built_in">int</span>(times[i]))//<span class="number">60</span>)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br></pre></td></tr></table></figure><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907190612172.png" alt="image-20230907190612172"></p><p>内存有东西，转一下十六进制</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907190900242.png" alt="image-20230907190900242"></p><h1><span id="easy_vmdk">Easy_VMDK</span></h1><p>bkcrack爆破</p><p>-C：需要解密的压缩包</p><p>-c：加密的文件</p><p>-x：偏移量，这里用文件头，偏移量是0，直接找一个文件头</p><p>-k：密钥</p><p>-d：解密文件</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907194050767.png" alt="image-20230907194050767"></p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230907194549894.png" alt="image-20230907194549894"></p><p>后面的部分之后再探索QAQ</p><p>总结：bkcrack爆破用法</p><h1><span id="matryoshka">Matryoshka</span></h1><p>取证软件取一下能找到三个东西，一个jpg一个rar和一个encrypt</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908134816063.png" alt="image-20230908134816063"></p><p>压缩包里面只有一个普通的txt</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908134958708.png" alt="image-20230908134958708"></p><p>压缩包拖到010看看</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908135019645.png" alt="image-20230908135019645"></p><p>FF D8一眼jpg头，分离一下</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908135119122.png" alt="image-20230908135119122"></p><p>和取证出来的图片一样，考虑盲水印提取</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908154809089.png" alt="image-20230908154809089"></p><p>得到Watermark_is_fun，但是加密容器的密码是watermark_is_fun</p><p>挂载后有一个txt</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908155309248.png" alt="image-20230908155309248"></p><p>很明显的零宽隐写，解一下</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908155709647.png" alt="image-20230908155709647"></p><p>cyberchef解一下</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908155740876.png" alt="image-20230908155740876"></p><p>base32，然后出来的结果很像flag的形式，维吉尼亚，刚刚的隐写内容是key</p><p><img src="Users\李木木\AppData\Roaming\Typora\typora-user-images\image-20230908155805329.png" alt="image-20230908155805329"></p><p>DASCTF{congratulati0n_you_f1nd_th3_f14g!!!}</p><p>总结：零宽，盲水印，以及没有取证软件</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/09/09/%E7%BE%8A%E5%9F%8E%E6%9D%AF%E9%83%A8%E5%88%86misc/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title></title>
      <link>http://example.com/2023/09/01/2023%E8%93%9D%E5%B8%BD%E6%9D%AFmisc%E5%A4%8D%E7%8E%B0/</link>
      <guid>http://example.com/2023/09/01/2023%E8%93%9D%E5%B8%BD%E6%9D%AFmisc%E5%A4%8D%E7%8E%B0/</guid>
      <pubDate>Fri, 01 Sep 2023 09:02:30 GMT</pubDate>
      
        
        
      <description>&lt;h2&gt;&lt;span id=&quot;ez_forensics&quot;&gt;ez_Forensics&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;首先扫描镜像的信息，可以得知使用Win7SP1x64_23418可以获取信息&lt;/p&gt;
&lt;p&gt;扫描进程&lt;/p&gt;
&lt;p&gt;.\volatility.exe -f mem.raw</description>
        
      
      
      
      <content:encoded><![CDATA[<h2><span id="ez_forensics">ez_Forensics</span></h2><p>首先扫描镜像的信息，可以得知使用Win7SP1x64_23418可以获取信息</p><p>扫描进程</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 imageinfo</p><p><img src="1.png" alt="image-20230901155558727"></p><p>发现有一个notepad进程，使用editbox插件看看有什么信息</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 editbox</p><p><img src="2.png" alt="image-20230901155636606"></p><p>根据信息猜测会有一个压缩文件，并且我们应该需要使用明文攻击来解密压缩包，我们扫描文件看看，将扫描的文件导出搜索</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 filescan &gt; file.txt</p><p><img src="3.png" alt="image-20230901155904498"></p><p><img src="4.png" alt="image-20230901155846538"></p><p>有一个压缩包和一个叫readme的文件，导出来</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 dumpfiles -Q 0x000000007d41cb50 -D .&#x2F;</p><p>.\volatility.exe -f mem.raw –profile&#x3D;Win7SP1x64_23418 dumpfiles -Q 0x000000007e434590 -D .&#x2F;</p><p><img src="5.png" alt="image-20230901160346071"></p><p>明文攻击，但是要找一下明文，比赛的时候铸币了，那么大一个明文摆在那里看不到</p><p><img src="6.png" alt="image-20230901160415485"></p><p><img src="7.png" alt="image-20230901160436365"></p><p>修改后压缩对比crc32值和压缩方式，使用明文攻击</p><p><img src="8.png" alt="image-20230901160918090"></p><p>得到密钥之后就可以另存然后打开了</p><p><img src="10.png" alt="image-20230901161519795"></p><p>010打开里面的table发现是png</p><p><img src="11.png" alt="image-20230901161715914"></p><p>保存一下</p><p><img src="12.png" alt="image-20230901161736628"></p><p>得到了一个类似密码本一样的东西，回去内存里面继续找东西</p><p><img src="13.png" alt="image-20230901161908632"></p><p>在文件里还发现了key.rsmr，搜了一下rsmr是鼠标的记录</p><p><img src="14.png" alt="image-20230901162002279"></p><p>导出，然后使用软件重复</p><p>发现是在画圈圈，用画图工具记录一下</p><p>、<img src="15.png" alt="image-20230901163229839"></p><p>对照之前的png得到</p><p>a91e37bf</p><p>可能是什么的密码，回去内存里面，进程还有cmd.exe，cmdscan扫描一下</p><p><img src="16.png" alt="image-20230901163624097"></p><p>有个set secret</p><p>换一个consoles</p><p>consoles相似与cmdscan，但是他扫描的不是COMMAND_HISTORY，而是CONSOLE_INFORMATION，而且还有个显著的优点是cmdscan只能查看到输入的指令，而consoles能查看到输入的指令以及缓冲区的输出(即键入和键出)</p><p><img src="17.png" alt="image-20230901163806847"></p><p>得到一串类似AES加密的东西，拿图片解出来的当作密钥</p><p><img src="18.png" alt="image-20230901164136115"></p><p>得到的是第二部分的密码，根据提示，另一部分在密码里第一部分的passware直接出</p><p><img src="19.png" alt="image-20230901165850010"></p><p><img src="20.png" alt="image-20230901165850010"></p><p>最后的flag：flag{194a019a-1767-913a-f140-2626195942a0}</p><h1><span id="后记">后记</span></h1><p>比赛的时候很难受的是，找到了secret的aes，知道后面大概就是找一个key来解密，知道大概就是明文攻击，但是找不到原来明文，现在回来一看亏死了，下次加油</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2023/09/01/2023%E8%93%9D%E5%B8%BD%E6%9D%AFmisc%E5%A4%8D%E7%8E%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ping ping ping</title>
      <link>http://example.com/2023/04/03/ping-ping-ping/</link>
      <guid>http://example.com/2023/04/03/ping-ping-ping/</guid>
      <pubDate>Mon, 03 Apr 2023 03:40:02 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;例题：&lt;br&gt;&lt;img src=&quot;ping.png&quot;&gt;&lt;br&gt;打开源码发现也只有&amp;#x2F;?ip&amp;#x3D;&lt;br&gt;随便输入一串ip &amp;#x2F;?127.0.0.1&lt;br&gt;发现有回显，判断为ping命令执行，&amp;#x2F;?127.0.0.1;ls查看目录&lt;br&gt;&lt;img</description>
        
      
      
      
      <content:encoded><![CDATA[<p>例题：<br><img src="ping.png"><br>打开源码发现也只有&#x2F;?ip&#x3D;<br>随便输入一串ip &#x2F;?127.0.0.1<br>发现有回显，判断为ping命令执行，&#x2F;?127.0.0.1;ls查看目录<br><img src="pingls.png"><br>尝试读取flag失败，发现过滤了空格<br><img src="fkspace.png"><br>知识点：绕过过滤<br>绕过空格的方法有：<br>${IFS}$9<br>{IFS}<br>$IFS<br>${IFS}<br>$IFS$1<br>IFS<br>&lt;<br>&lt;&gt;<br>{cat,flag.php}<br>%20   (space)<br>%09   (tab)<br>X&#x3D;$’cat\x09.&#x2F;flag.php’;$X       （\x09表示tab，也可以用\x20）<br>尝试&#x2F;?127.0.0.1;cat${IFS}$9flag.php 发现过滤了{}<br><img src="symbol.png"><br>用$IFS$1 发现不给看flag<br><img src="flag.png"><br>读index发现是php源码，注意到有一个变量a，可以使用简单的拼接<br><img src="index.png"><br>&#x2F;?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$1fla$a.php<br>发现没有回显，最后查看注释发现flag在网页注释里</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/ping/">ping</category>
      
      
      <comments>http://example.com/2023/04/03/ping-ping-ping/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CTF PHP filter</title>
      <link>http://example.com/2023/04/03/CTF-PHP-filter/</link>
      <guid>http://example.com/2023/04/03/CTF-PHP-filter/</guid>
      <pubDate>Mon, 03 Apr 2023 03:00:39 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;例题1：buuctf include&lt;br&gt;查看源码发现除了一个php之外没有东西，由include想到可能是php漏洞&lt;br&gt;知识点：&lt;br&gt;php:&amp;#x2F;&amp;#x2F;filter 可以伪协议文件包含读取源代码，加上read&amp;#x3D;convert.base64-</description>
        
      
      
      
      <content:encoded><![CDATA[<p>例题1：buuctf include<br>查看源码发现除了一个php之外没有东西，由include想到可能是php漏洞<br>知识点：<br>php:&#x2F;&#x2F;filter 可以伪协议文件包含读取源代码，加上read&#x3D;convert.base64-encode，php中要<br>转为base64输出<br><img src="filter1.png"><br>构造payload：<br>?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<br><img src="base64res.png"><br>最后解码可得flag</p>]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/PHP/">PHP</category>
      
      
      <comments>http://example.com/2023/04/03/CTF-PHP-filter/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>hexo中插入图片</title>
      <link>http://example.com/2022/09/04/%E5%9B%BE%E7%89%87/</link>
      <guid>http://example.com/2022/09/04/%E5%9B%BE%E7%89%87/</guid>
      <pubDate>Sat, 03 Sep 2022 18:55:43 GMT</pubDate>
      
      <description>一些在很多次插入图片显示不出来的经历</description>
      
      
      
      <content:encoded><![CDATA[<p>一丶下载插件<br>  在博客根目录下git bash npm install hexo-asset-image –save<br>  修改老版本的文件<br>  node_modules –&gt; hexo-asset-image –&gt; index.js<br>  记事本打开：<br>  $(this).attr(‘src’, config.root + link + src);<br>  把这一行代码改成下面这样<br>  $(this).attr(‘src’, src);<br>  保存文件。<br>二丶更改站点配置<br>  打开站点配置文件并修改<br>  _config.yml中的 post_asset_folder: false<br>  改为true。<br>三丶插入图片<br>  在md编辑工具中使用md语法插入图片<br>  and<br>  在网页上预览<br>  结束~<br>注：<br>  这样设置下来在主页无法显示图片，会有一个显示错误的图标很难看，这里可以用预览来解决<br>  在文章编辑的头部加入<br>  description：XXX<br>  后面写上预览的部分，图片错误就会消失啦<br>  给文章加上预览的功能方法之一就是这样~</p><p><img src="1.jpg"></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/09/04/%E5%9B%BE%E7%89%87/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>第一次尝试</title>
      <link>http://example.com/2022/08/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/</link>
      <guid>http://example.com/2022/08/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/</guid>
      <pubDate>Sun, 21 Aug 2022 07:42:59 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;这是第一篇测试文章&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>这是第一篇测试文章</p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/08/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
